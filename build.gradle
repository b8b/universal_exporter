buildscript {
    ext.kotlin_version = "1.2.40"

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
    }
}

group = "org.cikit"
version = project.properties["VERSION"]

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

sourceCompatibility = 1.8

repositories {
    jcenter()
    maven {
        url "https://dl.bintray.com/kotlin/kotlinx"
    }
}

dependencies {
    def logbackVersion = "1.2.3"
    def vertxVersion = "3.5.1"
    def jacksonVersion = "2.9.2"

    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.5")
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-io:0.22.5")
    compile("org.jetbrains.kotlinx:kotlinx-html-jvm:0.6.8")

    compile("com.typesafe:config:1.2.1")

    compile("com.fasterxml:aalto-xml:1.0.0")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")

    compile("io.prometheus:simpleclient_hotspot:0.1.0")

    compile("io.vertx:vertx-lang-kotlin:$vertxVersion") {
        exclude(group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jre8")
        exclude(group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jre7")
    }
    compile("io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion") {
        exclude(group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jre8")
        exclude(group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jre7")
    }
    compile("io.vertx:vertx-web:$vertxVersion")

    compile("ch.qos.logback:logback-classic:$logbackVersion")

    testCompile("junit:junit:4.12")
    testCompile("io.vertx:vertx-unit:$vertxVersion")
}

mainClassName = "org.cikit.core.MainKt"
applicationDefaultJvmArgs = ["-Xmx20m"]

run {
    args = ["-config=universal_exporter.conf"]
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def modules = sourceSets.main.allSource.collect {
    def pkgDir = it.parentFile
    def modName = pkgDir.name
    pkgDir = pkgDir.parentFile
    if (pkgDir != null && pkgDir.name == "modules") {
        pkgDir = pkgDir.parentFile
        if (pkgDir != null && pkgDir.name == "cikit") {
            pkgDir = pkgDir.parentFile
            if (pkgDir != null && pkgDir.name == "org") {
                return modName
            }
        }
    }
    return null
}.toSet() - null

for (module in modules) {
    sourceSets.create(module) {
        java {
            srcDirs = ["src/main/java"]
            include "org/cikit/modules/$module/**"
        }
        kotlin {
            srcDirs = ["src/main/kotlin"]
            include "org/cikit/modules/$module/**"
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

sourceSets {
    main {
        java {
            include("org/cikit/core/**")
        }
        kotlin {
            include("org/cikit/core/**")
        }
    }
    test {
        for (module in modules) {
            compileClasspath += sourceSets[module].runtimeClasspath
            runtimeClasspath += sourceSets[module].runtimeClasspath
        }
    }
}

jar {
    from sourceSets.main.output
    for (module in modules) {
        from sourceSets[module].output
    }
    manifest {
        attributes["Implementation-Title"] = project.name
        attributes["Implementation-Version"] = version
        attributes["Main-Class"] = mainClassName
        attributes["Class-Path"] = configurations.compile.collect { it.getName() }.join(" ")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

distributions {
    main {
        contents {
            from("README.md", "gradle.properties")
            from("src/main/dist")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ["mavenJava"]
    pkg {
        repo = 'cikit'
        name = 'universal_exporter'
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/b8b/universal_exporter.git'
        labels = ['prometheus', 'kotlin', 'metrics-exporters', 'monitoring']
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = 'Collection of metrics exporters for prometheus'
            vcsTag = "v${project.version}"
        }
    }
}
